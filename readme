# Node.js Authentication Project

## Project Description

This Node.js authentication project showcases a robust user authentication system using an array of technologies and libraries, including Passport-Local, Bcrypt, JWT (JSON Web Tokens), Nodemailer, Google APIs, Express Router, Node.js, MongoDB, Google OAuth 2.0, EJS, Bootstrap, Flash messages, Express, Express-session, and Express-EJS-Layouts. The application allows users to register, log in, reset passwords, and offers secure authentication features.

## Technologies Used

- **Node.js:** The project is developed on the Node.js runtime environment.
- **MongoDB:** MongoDB serves as the NoSQL database for user data storage and session management.
- **Express.js:** Express.js is the foundational framework for building the web application and handling routes.
- **Passport-Local:** Passport-Local strategy is used for local authentication.
- **Bcrypt:** Bcrypt is employed for secure password hashing.
- **JWT (JSON Web Tokens):** JWTs are used for user session authentication.
- **Nodemailer:** Nodemailer is utilized for sending account activation and password reset emails.
- **Google APIs:** Google APIs are integrated for Google OAuth 2.0 authentication.
- **EJS (Embedded JavaScript):** EJS templates are used for rendering dynamic web pages.
- **Bootstrap:** Bootstrap provides a responsive and attractive front-end design.
- **Flash Messages:** Informative flash messages enhance the user experience.
- **Express-Session:** Express-session is used for session management.
- **Express-EJS-Layouts:** Express-EJS-Layouts are incorporated for efficient layout rendering.
- **Localhost Port 6900:** The application runs on localhost, using port 6900.

## Features

- **User Registration:** New users can easily register by providing their name, email, and password.
- **User Login:** Registered users can securely log in with their credentials.
- **Forgot Password:** Users can request a password reset via email.
- **Password Reset:** Users can reset their password securely by following a reset link sent to their email.
- **Google OAuth 2.0:** Supports Google OAuth 2.0 for streamlined authentication.
- **Flash Messages:** Provides informative flash messages to improve the user experience.

## Usage

1. Clone the project to your local machine.
2. Set up MongoDB and provide the connection string in the project.
3. Install project dependencies using npm.
4. Run the application using `npm start`.
5. Access the application on `http://localhost:6900`.

## Contributions

Contributions and feedback are encouraged. If you'd like to contribute or report issues, please open a GitHub issue or submit a pull request.

## License

This project is open-source and available under the [MIT License](#).

## Author

**Author:** Karthik Raju

## Acknowledgments

A special thanks to the developers and maintainers of the libraries and APIs used in this project.
